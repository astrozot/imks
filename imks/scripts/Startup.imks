######################################################################
##                   iMKS startup file, v. 1.0                      ##
##    (c) 2000-2014 by Marco Lombardi <marco.lombardi@gmail.com>    ##
######################################################################

%newbaseunit m   # "Meter\n\nThe meter is the length of the path travelled by light in vacuum during a time\ninterval of 1/299 792 458 of a second."
%newbaseunit g   # "Gram\n\nThe kilogram is the unit of mass; it is equal to the mass of the international\nprototype of the kilogram."
%newbaseunit s   # "Second\n\nThe second is the duration of 9 192 631 770 periods of the radiation\ncorresponding to the transition between the two hyperfine levels of the ground\nstate of the cesium 133 atom."
%newbaseunit A   # "Ampere\n\nThe ampere is that constant current which, if maintained in two straight\nparallel conductors of infinite length, of negligible circular cross-section,\nand placed 1 meter apart in vacuum, would produce between these conductors a force equal to 2 x 10^-7 newton per meter of length."
%newbaseunit K   # "Kelvin\n\nThe kelvin, unit of thermodynamic temperature, is the fraction 1/273.16 of the\nthermodynamic temperature of the triple point of water."
%newbaseunit mol # "Mole\n\nThe mole is the amount of substance of a system which contains as many\nelementary entities as there are atoms in 0.012 kilogram of carbon 12."
%newbaseunit cd  # "Candle\n\nThe candela is the luminous intensity, in a given direction, of a source that\nemits monochromatic radiation of frequency 540 x 10^12 hertz and that has a\nradiant intensity in that direction of 1/683 watt per steradian."

%newunit K=(0[K], 1[K]) # "Kelvin\n\nThe kelvin, unit of thermodynamic temperature, is the fraction 1/273.16 of the\nthermodynamic temperature of the triple point of water."

%newbasecurrency EUR # "Euro"

%newprefix Y=1e24   # "Yotta"
%newprefix Z=1e21   # "Zetta"
%newprefix E=1e18   # "Exa"
%newprefix P=1e15   # "Peta"
%newprefix T=1e12   # "Tera"
%newprefix G=1e9    # "Giga"
%newprefix M=1e6    # "Mega"
%newprefix k=1e3    # "Kilo"
%newprefix h=1e2    # "Hecto"
%newprefix da=1e1    # "Deka"
%newprefix d=fraction(1, 10^1)  # "Deci"
%newprefix c=fraction(1, 10^2)  # "Centi"
%newprefix m=fraction(1, 10^3)  # "Milli"
%newprefix u=µ=fraction(1, 10^6)  # "Micro"
%newprefix n=fraction(1, 10^9)  # "Nano"
%newprefix p=fraction(1, 10^12) # "Pico"
%newprefix f=fraction(1, 10^15) # "Femto"
%newprefix a=fraction(1, 10^18) # "Atto"
%newprefix z=fraction(1, 10^21) # "Zepto"
%newprefix y=fraction(1, 10^24) # "Yocto"

%newsystem si=[m|s|kg|K|A|cd|mol] # "Internation system (SI)"
%newsystem SI=[*|si]

## Now we have defined the default unit system, mks, and we can thus
## proceed with the definition of derived units and symbols.

%newunit in=inch=2.54[cm]      	  	  # "Inch"
%newunit ft=foot=12[in]			  # "Foot"
%newunit yd=yard=3[ft]			  # "Yard"
%newunit mi=mile=5280[ft]		  # "Mile"
%newunit nmi=1852[m]			  # "Nautical Mile"
%newunit fath=fathom=6[ft]	          # "Fathom"
%newunit micron=1[um]			  # "Micron"
%newunit mil=1[in]/1000			  # "Mil"
%newunit point=1[in]/72			  # "Point"
%newunit Å=Ang=angstrom=1e-10[m]          # "Angstrom"
%newunit fermi=1e-15[m]			  # "Fermi"

%newunit °C=Celsius=(273.15[K], 1[K])	  # "Celsius degree"
%newunit °F=Fahrenheit=(459.67[K]*5/9, 5[K]/9)	  # "Fahrenheit degree"

%newunit hect=hectare=10000[m^2]	  # "Hectare"
%newunit acre=1[mi^2] / 640		  # "Acre"
%newunit barn=1e-28[m^2]		  # "Barn"

%newunit l=liter=1e-3[m^3]		  # "Liter"
%newunit tsp=4.92892159375[ml]		  # "Teaspoon"
%newunit tbsp=3[tsp]			  # "Tablespoon"
%newunit ozfl=2[tbsp]			  # "Fluid Ounce"
%newunit cup=8[ozfl]			  # "Cup"
%newunit pt=2[cup]			  # "Pint"
%newunit pint=1[pt]			  # "Pint"
%newunit qt=2[pt]			  # "Quart"
%newunit quart=1[qt]			  # "Quart"
%newunit gal=gallon=4[qt]		  # "US Gallon"

%newunit second=1[s]			  # "Second"
%newunit min=60[s]			  # "Minute"
%newunit hr=h=hour=60[min]		  # "Hour"
%newunit day=24[hr]			  # "Day"
%newunit week=7[day]			  # "Week"
%newunit yr=year=365.25[day]	  	  # "Julian year"
%newunit Cy=36525[day]			  # "Julian century"
%newunit Hz=1[s^-1]			  # "Hertz"

%newunit mph=1[mi/hr]			  # "Miles per hour"
%newunit kph=1[km/hr]			  # "Kilometers per hour"
%newunit knot=1[nmi/hr]			  # "Knot"

%newunit gram=1[g]			  # "Gram"
%newunit oz=28.349523125[g]		  # "Ounce"
%newunit lb=16[oz]			  # "Pound (mass)"
%newunit pound=1[lb]			  # "Pound (mass)"
%newunit carat=0.2[g]			  # "Carat"

%newunit ga=9.80665[m/s^2]		  # "g acceleration"

%newunit N=Newton=1[m kg/s^2]		# "Newton"
%newunit dyn=dyne=1e-5[N]		# "Dyne"

%newunit J=Joule=1[N m]			# "Joule"
%newunit erg=1e-7[J]			# "Erg"
%newunit cal=4.1868[J]			# "International Table Calorie"

%newunit W=watt=1[J/s]			# "Watt"
%newunit hp=745.7[W]			# "Horsepower"

%newunit Pa=pascal=1[N/m^2]		# "Pascal"
%newunit bar=1e5[Pa]			# "Bar"
%newunit psi=6894.75729317[Pa]		# "Pound per spare inch"

%newunit P=0.1[Pa s]			# "Poise (viscosity)"
%newunit St=1e-4[m^2/s]			# "Stokes (viscosity)"
%newunit ampere=1[A]			# "Ampere"
%newunit C=coulomb=1[A s]		# "Coulomb"
%newunit V=volt=1[W/A]			# "Volt"
%newunit Ω=ohm=1[V/A]			# "Ohm"
%newunit S=siemens=1[A/V]		# "Siemens"
%newunit F=farad=1[C/V]			# "Farad"
%newunit Wb=weber=1[V s]		# "Weber"
%newunit H=henry=1[Wb/A]		# "Henry"
%newunit T=tesla=1[Wb/m^2]		# "Tesla"
%newunit Gs=gauss=1e-4[T]		# "Gauss"

%newunit candela=1[cd]			# "Candela"
%newunit lm=lumen=4*pi*1[cd]		# "Lumen"
%newunit lx=lux=1[lm/m^2]		# "Lux"
%newunit ph=phot=1e4[lx]		# "Phot"

%newunit Bq=1[s^-1]			# "Becquerel (radioactivity)"
%newunit Ci=curie=3.7e10[Bq]		# "Curie"

%newunit mole=1[mol]			# "Mole"

%newunit rad=1                          # "Radiant"
%newunit °=deg=pi/180			# "Degree"
%newunit arcmin=1[deg]/60		# "Arcminute"
%newunit arcsec=1[arcmin]/60		# "Arcsecond"

# Physical constants
%load_imks_ext -s constants
%newunit amu=u=const["atomic mass unit-kilogram relationship"] # "Atomic mass unit"
%newunit atm=const["standard atmosphere"] # "Standard atmosphere at see level"
%newunit torr=1[atm]/760		# "Torr"
%let c=const["speed of light in vacuum"]
%let G=const["Newtonian constant of gravitation"]
%let h=const["Planck constant"]
%let hbar=h/(2*pi)                           # "Planck constant over 2 pi"
%let k=const["Boltzmann constant"]
%let alpha=const["fine-structure constant"]
%let Nav=const["Avogadro constant"]

%let m_e=const["electron mass"]
%let m_p=const["proton mass"]
%let m_d=const["deuteron mass"]
%let m_n=const["neutron mass"]
%let m_mu=const["muon mass"]
%let m_tau=const["tau mass"]

%let e=const["elementary charge"]
%newunit eV=1[V]*e			# "Electron Volt"
%let Gfermi=const["Fermi coupling constant"]
%let me=const["electron mass"]
%let muBohr=e*hbar/(2*me)                    # "Bohr magneton"
%let faraday=e*Nav                           # "Faraday constant"

%let g=const["standard acceleration of gravity"]
%let atmosphere=const["standard atmosphere"]

%let mu0=4*pi*1e-7[H/m]                      # "Permeability of vacuum (exact)"
%let epsilon0=1/(mu0*c^2)                    # "Permittivity of vacuum (exact)"
%let ke=1/(4*pi*epsilon0)                    # "Coulomb constant (exact)"

%let sigma=2*pi^5*k^4/(15*h^3*c^2)           # "Stefan-Boltzmann constant"
%let R=Nav*k                                 # "Molar gas constant"

%newsystem easy=[m|s|kg|K|A|lx|mol|EUR|N|J|W|Pa|C|V|ohm|F|H|T|lx]
%newsystem Easy=[*|easy]

# Natural units
%newsystem planck=["c"|"hbar"|"G"|"ke"|"k"]  # "Planck unit system"
%newsystem stoney=["c"|"G"|"ke"|"e"|"k"]     # "Stoney unit system"
%newsystem atomic=["e"|"me"|"hbar"|"ke"|"k"] # "Hartree atomic unit"
%newsystem qcdunits=["c"|"mp"|"hbar"|"k"]    # "Quantum chromodynamics (QCD) unit system"

# Formats
def hms(h=0, m=0, s=0, M=0):
    return 1[hour]*h + 1[min]*m + 1[s]*s + 1[min]*M
%newtransformer hms="(?P<h>\d+)h (?:(?P<m>\d\d?)m (?P<s>\d\d?(?:\.\d*)?)s|(?P<M>\d\d?(?:\.\d*)?)m)":hms # "A transformer for input in the format 12h 30m 25.2s"

def showhms(x, latex=False, pretty=False):
    try:
        x_ = abs(x + 0.0005[s]) / 1[hour]
        h = int(x_)
        x_ = (x_ - h) * 60
        m = int(x_)
        x_ = (x_ - m) * 60
        s = int(x_ * 1000) / 1000
        sgn = "" if x > 0 else "-"
        if latex:
            return "$%s%d^\mathrm{h}\,%d^\mathrm{m}\,%g^\mathrm{s}$" % \
                (sgn, h, m, s)
        else:
            return "%s%dh %dm %gs" % (sgn, h, m, s)
    except UnitError:
        y = x
        y.showunit = None
        return repr(y)
%newformat hms=showhms # "A format for strings like 12h 30m 25.2s"

def dhms(d=0, h=0, m=0, s=0, M=0):
    return 24[hour]*d + 1[hour]*h + 1[min]*m + 1[s]*s + 1[min]*M
%newtransformer dhms="(?P<d>\d+)d (?P<h>\d+)h(?: (?P<m>\d\d?)m (?P<s>\d\d?(?:\.\d*)?)s| (?P<M>\d\d?(?:\.\d*)?)m)?":dhms # "A transformer for input in the format 1d 12h 30m 25.2s"

def showdhms(x, latex=False, pretty=False):
    try:
        x_ = abs(x + 0.0005[s]) / 24[hour]
        d = int(x_)
        x_ = (x_ - d) * 24
        h = int(x_)
        x_ = (x_ - h) * 60
        m = int(x_)
        x_ = (x_ - m) * 60
        s = int(x_ * 1000) / 1000
        sgn = "" if x > 0 else "-"
        if latex:
            return "$%s%d^\mathrm{d}\,%d^\mathrm{h}\,%d^\mathrm{m}\,%g^\mathrm{s}$" % \
                (sgn, d, h, m, s)
        else:
            return "%s%dd %dh %dm %gs" % (sgn, d, h, m, s)
    except UnitError:
        y = x
        y.showunit = None
        return repr(y)
%newformat dhms=showdhms # "A format for strings like 12h 30m 25.2s"

def dms(d, m=0, s=0, M=0):
    return 1[deg]*d + 1[arcmin]*m + 1[arcsec]*s + 1[arcmin]*M
%newtransformer dms="(?P<d>\d+)[°d] (?:(?P<m>\d\d?)' (?P<s>\d\d?(?:\.\d*)?)\"|(?P<M>\d\d?(?:\.\d*)?)')":dms # "A transformer for input in the format 12d 30' 25.2s\""

def showdms(x, latex=False, pretty=False):
    try:
        x_ = abs(x + 0.0005[arcsec]) / 1[deg]
        h = int(x_)
        x_ = (x_ - h) * 60
        m = int(x_)
        x_ = (x_ - m) * 60
        s = round(x_ * 1000) / 1000
        sgn = "" if x > 0 else "-"
        if latex:
            return r"$%s%d^\circ\,%d'\,%g''$" % \
        (sgn, h, m, s)
        elif pretty:
            return "%s%d° %d' %g\"" % (sgn, h, m, s)
        else:
            return "%s%dd %d' %g\"" % (sgn, h, m, s)
    except UnitError:
        y = x
        y.showunit = None
        return repr(y)
%newformat dms=showdms # "A format for strings like 12d 30' 25.2\""

%load_imks Astro
%load_imks_ext -s currencies

%defaultsystem si

### Local Variables:
### mode: python
### End:
